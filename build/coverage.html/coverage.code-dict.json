{"/home/travis/build/npmtest/node-npmtest-iron-node/test.js":"/* istanbul instrument in package npmtest_iron_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iron-node/lib.npmtest_iron_node.js":"/* istanbul instrument in package npmtest_iron_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_iron_node = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_iron_node = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-iron-node/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-iron-node && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_iron_node */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_iron_node\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_iron_node.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_iron_node.rollup.js'] =\n            local.assetsDict['/assets.npmtest_iron_node.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_iron_node.__dirname + '/lib.npmtest_iron_node.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/.iron-node.js":"var path = require(\"path\");\nvar settings = {\n  \"nodeModule\" : {\n    // \"scriptInjection\" : \"debugger;\",  // Prepend some custom javascript code to your code.\n    \"arguments\" : [                   // Add additional arguments. Node will pass undefined to these parms. This is usefull to mimic a native browser environment.\n      \"window\", \"document\", \"self\", \"navigator\", \n    ]  \n  },\n  \"v8\": {\n    \"flags\" : [ \t\t\t                // DEFAULT=[]; https://github.com/thlorenz/v8-flags/blob/master/flags-0.11.md\n    \t// \"--harmony-arrow-functions\"\n    ]\n  },\n  \"app\": {\n    \"native+\"                       : true,   // DEFAULT=FALSE; extends require to search native modules respecting the current v8 engine version.\n    \"autoAddWorkSpace\"              : false,  // DEFAULT=TRUE; disables the autoAddWorkSpace behavior.\n    \"openDevToolsDetached\"          : true,  // DEFAULT=FALSE; opens the dev tools windows detached in an own window.\n    \"hideMainWindow\"                : true,  // DEFAULT=FALSE;  hides the main window to show dev tools only.\n    \"useIronNodeDevToolsExtension\"  : false,  // DEFAULT=TRUE;  loads the IronNodeDevToolsExtension.\n  },\n  \"workSpaceDirectory\"        : function(argv) {  // determines the workspace directory for specific commandline applications.\n    var result = \"\";\n    if (argv[2]){\n      result = path.dirname(argv[2]);\n      var startupScriptName = path.basename(argv[2]).toLowerCase();\n\n      switch(startupScriptName) {\n          case \"_mocha\":\n            result = process.cwd();\n            break;\n          default:\n            result = path.resolve(result);\n            break;\n      }\n    }\n\n    return result;\n  }\n};\n\nmodule.exports = settings;","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/app.js":"var os = require(\"os\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar remote = require(\"electron\").remote;\nvar markdown = require(\"markdown\").markdown;\nvar packageController = require(\"package.js\");\nvar app = require(\"electron\").remote.app;\nvar shell = require(\"electron\").shell;\nvar PrettyError = require(\"pretty-error\");\nvar prettyError = new PrettyError();\nvar deepExtend = require(\"deep-extend\");\nvar s = \"file:///\" + path.join(__dirname, \"app.js\").replace(/\\\\/g, \"/\");\nprettyError.skipPath( s );\nprettyError.withoutColors();\nprettyError.skipNodeFiles();\nvar syntaxErrorCheck = require(\"syntax-error\");\n\nwindow.socialIcons.setup.githubUrl = \"https://github.com/s-a/iron-node/\";\nwindow.socialIcons.setup.media = \"https://raw.githubusercontent.com/s-a/iron-node/master/screenshot.jpg\";\nwindow.socialIcons.setup.url = \"http://s-a.github.io/iron-node/\";\nwindow.socialIcons.setup.title = \"Dead simple Node.js code debugging\";\n\nvar sep \t\t= path.sep;\nvar userHome \t= os.homedir() + sep + '.iron-node';\n\nvar onLinkClick = function(event) {\n\tevent.preventDefault();\n\tif (this.href.indexOf(\"git+\") === 0){\n\t\tshell.openExternal(this.href.split(\"git+\")[1]);\n\t} else {\n\t\tshell.openExternal(this.href);\n\t}\n\treturn false;\n};\n\nwindow.addEventListener(\"load\",function(){\n\tvar links = document.getElementsByTagName(\"a\");\n\tfor (var i = 0; i < links.length; i++) {\n\t\tvar link = links[i];\n\t\tlink.onclick = onLinkClick;\n\t}\n},false); //W3C\n\n\n\n\nvar notify = function (msg) {\n\tvar notification = null;\n\ttry{\n\t\tNotification.requestPermission();\n\t\tnotification = new Notification(msg.title, {body: msg.text, icon: \"../logo/icon.png\"});\n\t} catch(e){\n\t\tconsole.error(e, notification);\n\t}\n};\n\nvar error = function(error) {\n\tconsole.error(prettyError.render(error));\n\tconsole.error(\"Details\", error);\n\n\tvar msg = {\n\t\ttitle : \"\",\n\t\ttext : \"\"\n\t};\n\n\tswitch (typeof error) {\n\t\tcase \"object\":\n\t\t\tmsg.title += \"Uncaught Exception: \" + (error.code || \"\");\n\t\t\tmsg.text += error.message;\n\t\t\tbreak;\n\t\tcase \"string\":\n\t\t\tmsg.text += error;\n\t\t\tbreak;\n\t}\n\tmsg.text += \"\\nPlease check the console log for more details.\";\n\tnotify(msg);\n};\n\nprocess.on(\"uncaughtException\", error);\nprocess.exit = function(code) {\n\tvar msg = {\n\t\ttitle : \"process.exit\",\n\t\ttext : \"\"\n\t};\n\n\tmsg.text += \"Exit Code: \\\"\" + code + \"\\\"\";\n\n\tif (code !== 0){\n\t\tmsg.text += \"ERROR : Please check the console log for more details.\";\n\t}\n\n\tnotify(msg);\n};\n\nvar prepareStartScriptParameter = function(filename) {\n\tvar result = filename;\n\n\tif (!path.isAbsolute(filename)){\n\t\tresult = path.resolve(process.cwd(), filename);\n\t}\n\n\treturn result;\n};\n\nvar initializePackageScripts = function(json) {\n\tvar packageMeta = json;\n\tvar scripts = [];\n\tif (packageMeta.scripts){\n\t\tfor(var script in packageMeta.scripts){\n\t\t\tif (packageMeta.scripts.hasOwnProperty(script)){\n\t\t\t\tscripts.push('<a class=\"menu-item\" href=\"#\"><span class=\"octicon octicon-terminal\"></span>' + script + \" : \" + packageMeta.scripts[script] + \"</a>\");\n\t\t\t}\n\t\t}\n\t}\n\tdocument.getElementById(\"project-terminal\").innerHTML = scripts.join(\"\");\n};\n\nvar initializePackageInfo = function(rootDirectory){\n\tvar p = path.join(rootDirectory, \"package.json\");\n\tfs.exists(p, function(exists){\n\t\tif (exists){\n\t\t\tfs.readFile(p, function(err, data){\n\t\t\t\tif (err){\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t} else {\n\t\t\t\t\ttry{\n\t\t\t\t\t\tdocument.getElementById(\"project-package\").innerHTML = '<a class=\"menu-item\" href=\"#\"><span class=\"octicon octicon-package\"></span><span>' + p + \"</span></a>\";\n\t\t\t\t\t\tvar meta = JSON.parse(data.toString());\n\t\t\t\t\t\tinitializePackageScripts(meta);\n\t\t\t\t\t\tif (meta.repository && meta.repository.url){\n\t\t\t\t\t\t\tdocument.getElementById(\"project-repo-url\").innerHTML = '<a class=\"menu-item\" href=\"' + meta.repository.url + '\"><span class=\"octicon octicon-repo\"></span>Repository</a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (meta.bugs && meta.bugs.url){\n\t\t\t\t\t\t\tdocument.getElementById(\"project-bugs-url\").innerHTML = '<a class=\"menu-item\" href=\"' + meta.bugs.url + '\"><span class=\"octicon octicon-bug\"></span>Issues</a>';\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e){\n\t\t\t\t\t\tconsole.error(\"Error in\", p, e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\nvar initializeInfoWindow = function(rootDirectory, startupScript) {\n\tdocument.getElementById(\"project-filename\").innerHTML = startupScript;\n\n\tinitializePackageInfo(rootDirectory);\n\tvar filename = path.join(rootDirectory, \"DEBUG.md\");\n\tvar loadMarkdownFile = function(fn) {\n\t\tfs.readFile(fn, function(err, data){\n\t\t\tif (!err){\n\t\t\t\tdocument.getElementById(\"content\").innerHTML =  markdown.toHTML( data.toString() );\n\t\t\t\tvar links = document.getElementsByTagName(\"a\");\n\t\t\t\tfor (var i = 0; i < links.length; i++) {\n\t\t\t\t\tvar link = links[i];\n\t\t\t\t\tlink.onclick = onLinkClick;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\n\tfs.exists(filename, function(exists){\n\t\tif (exists){\n\t\t\tloadMarkdownFile(filename);\n\t\t} else {\n\t\t\tfilename = path.join(rootDirectory, \"README.md\");\n\t\t\tfs.exists(filename, function(exists){\n\t\t\t\tif (exists){\n\t\t\t\t\tloadMarkdownFile(filename);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n};\n\nvar extendProcessEnvironment = function () {\n\tvar envFilename = path.join(userHome, \"iron-node.env.json\");\n\tif (fs.existsSync(envFilename)){\n\t\tvar env = require(envFilename);\n\t\tprocess.env = deepExtend(env, process.env);\n\t\tif (env.NODE_PATH){\n\t\t\tmodule.paths.push(env.NODE_PATH);\n\t\t}\n\t}\n};\n\nvar boot = function() {\n\tprocess.stdout.write = console.log.bind(console);\n\tprocess.stderr.write = console.log.bind(console);\n\n\tvar customPackageFolder = path.join( app.getPath(\"appData\"), \"iron-node\", \"node_modules\" );\n\tif (!fs.existsSync(customPackageFolder)){\n\t\tcustomPackageFolder = path.join(__dirname, \"..\", \"node_modules\");\n\t}\n\n\tconsole.groupCollapsed(\"ironNode boot\");\n\tconsole.log(\"os\", os.platform(), os.type());\n\tconsole.log(\"versions\", process.versions);\n\tconsole.log(\"appData\", customPackageFolder );\n\n\n\tvar C = require(\"./config.js\");\n\tvar config = new C(remote.process.argv);\n\tconsole.log(\"configuration\", config);\n\tif (config && config.settings && config.settings.app && config.settings.app[\"native+\"] === true){\n\t\trequire(\"./require.js\");\n\t}\n\n\tif (fs.existsSync(customPackageFolder)){\n\t\tconsole.groupCollapsed(\"ironNode packages\");\n\t\tpackageController.autoload({\n\t\t\tdebug: true,\n\t\t\tidentify: function() {\n\t\t\t\treturn (this.meta.iron_node_package === true);\n\t\t\t},\n\t\t\tdirectories: [customPackageFolder],\n\t\t\tpackageContstructorSettings: {}\n\t\t});\n\t\tconsole.groupEnd();\n\t} else {\n\t\tconsole.warn(\"No packages folder found. You can install some at \" +  path.join( app.getPath(\"appData\"), \"iron-node\", \"node_modules\" ) + \" from \", \"https://www.npmjs.com/search?q=iron-node\", \":O)\");\n\t}\n\n\tconsole.groupEnd();\n\n\tvar args = remote.process.argv;\n\tif (args[2]){\n\t\targs[2] = prepareStartScriptParameter(args[2]);\n\t}\n\n\t// reset and equip process.argv for forthcoming Node.js scripts.\n\tprocess.argv = [args[0]];\n\tfor (var i = 2; i < args.length; i++) {\n\t\tvar arg = args[i];\n\t\tprocess.argv.push(arg);\n\t}\n\n\tif (args[2]){\n\t\tvar webContents = remote.getCurrentWindow().webContents;\n\t\tvar workSpaceDirectory = config.settings.workSpaceDirectory(args);\n\t\tif (!Array.isArray(workSpaceDirectory)){\n\t\t\tworkSpaceDirectory = [workSpaceDirectory];\n\t\t}\n\t\tif (config.settings.app.autoAddWorkSpace !== false){\n\t\t\tfor (var w = 0; w < workSpaceDirectory.length; w++) {\n\t\t\t\tvar wsd = workSpaceDirectory[w];\n\t\t\t\ttry {\n\t\t\t\t\twebContents.removeWorkSpace( wsd );\n\t\t\t\t} catch(e){}\n\t\t\t\twebContents.addWorkSpace( wsd );\n\t\t\t}\n\t\t}\n\t\tinitializeInfoWindow(workSpaceDirectory[0], args[2]);\n\n\t\tvar src = fs.readFileSync(args[2]);\n\t\tvar err = syntaxErrorCheck(src, args[2]);\n\t\tif (err){\n\t\t\tconsole.warn(\"Error compiling \", args[2], \"...\");\n\t\t\tconsole.error(prettyError.render(new Error(err)));\n\t\t\tconsole.warn(\"Try to go on...\");\n\t\t}\n\n\t\textendProcessEnvironment();\n\n\t\tvar Req = require(path.join(__dirname, \"require-custom-wrap.js\"));\n\t\tvar req = new Req(config.settings);\n\t\tconsole.info(req);\n\t\trequire(args[2]);\n\t} else {\n\t\tdocument.getElementById(\"project-filename\").innerHTML = \"No start script given.<br>Try <code>iron-node [path_to_your_javascript_file]</code>\";\n\t\tinitializeInfoWindow(process.cwd());\n\t}\n};\n\nboot();","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/node_modules/electron/index.js":"var fs = require('fs')\nvar path = require('path')\n\nvar pathFile = path.join(__dirname, 'path.txt')\n\nif (fs.existsSync(pathFile)) {\n  module.exports = path.join(__dirname, fs.readFileSync(pathFile, 'utf-8'))\n} else {\n  throw new Error('Electron failed to install correctly, please delete node_modules/electron and try installing again')\n}\n","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/config.js":"var fs = require(\"fs\");\r\nvar path = require(\"path\");\r\nvar deepExtend = require('deep-extend');\r\n\r\n\r\nvar linuxHome = function () {\r\n\treturn process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE;\r\n};\r\n\r\nvar osxHome = function () {\r\n\treturn path.join(process.env.HOME, \"Library/Preferences\");\r\n};\r\n\r\nvar home = function () {\r\n\treturn process.env.APPDATA || (process.platform === \"darwin\" ? osxHome() : linuxHome());\r\n};\r\n\r\n\r\nvar Config = function(argv) {\r\n\tvar workSpaceDirectory = \"\";\r\n\tvar startupScriptName = \"\";\r\n\r\n\tvar dir = \"\";\r\n\tif (argv[2]){\r\n\t\tdir = argv[2];\r\n\t\tworkSpaceDirectory = path.dirname(argv[2]);\r\n\t\tstartupScriptName = path.basename(argv[2]).toLowerCase();\r\n\t}\r\n\t// the only build in default\r\n\tswitch(startupScriptName) {\r\n\t    case \"_mocha\":\r\n\t        workSpaceDirectory = process.cwd();\r\n\t        break;\r\n\t}\r\n\r\n\tvar defaults = {\r\n\t\tfilename : null,\r\n\t\tsettings : {\r\n\t\t\tv8:{},\r\n\t\t\tapp:{},\r\n\t\t\tworkSpaceDirectory : function() {\r\n\t\t\t\tvar p = path.resolve(workSpaceDirectory);\r\n\t\t\t\treturn p;\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\tvar result = {};\r\n\r\n\tvar configFilename = path.join(path.resolve(path.dirname(dir)), \".iron-node.js\"); // full pathname\r\n\tif (!fs.existsSync(configFilename)){\r\n\t\tconfigFilename = path.join(process.cwd(), path.resolve(path.dirname(dir)), \".iron-node.js\"); // relative pathname\r\n\t}\r\n\ttry{\r\n\t\tconfigFilename = path.normalize(configFilename);\r\n\t\tif (!fs.existsSync(configFilename)){\r\n\t\t\tconfigFilename = path.join( process.cwd(), \".iron-node.js\"); // current working dir pathname\r\n\t\t}\r\n\t} catch (e){\r\n\t\tconfigFilename = path.join( process.cwd(), \".iron-node.js\"); // current working dir pathname\r\n\t}\r\n\tif (!fs.existsSync(configFilename)){\r\n\t\tconfigFilename = path.join( home(), \"iron-node\", \".iron-node.js\"); // global config pathname\r\n\t}\r\n\tif (fs.existsSync(configFilename)){\r\n\t\ttry{\r\n\t\t\tresult = {\r\n\t\t\t\tfilename : configFilename,\r\n\t\t\t\tsettings : require(configFilename)\r\n\t\t\t};\r\n\t\t} catch(e){\r\n\t\t\tconsole.error(e);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tvar cfg = deepExtend(defaults, result);\r\n\treturn cfg;\r\n};\r\n\r\nmodule.exports = Config;","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/menu.js":"var os = require(\"os\");\nvar remote = require(\"electron\");\nconst {Menu} = remote;\nvar template = [];\nvar SoftwareUpdate = require(\"./update.js\");\nconst {app} = require(\"electron\");\nvar path = require(\"path\");\nvar fs = require(\"fs\");\nvar shell = require(\"electron\").shell;\n\nvar Mnu = function() {\n\treturn this;\n};\n\nMnu.prototype.init = function(mainWindow) {\n\tvar mnuFile = {\n\t\tlabel: \"Project\",\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: \"Exit\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tmainWindow.close();\n\t\t\t\t},\n\t\t\t\taccelerator: \"Control+w\"\n\t\t\t}\n\t\t]\n\t};\n\n  if (os.platform() === \"darwin\") {\n    mnuFile.submenu.push({\n      type: \"separator\"\n    });\n    mnuFile.submenu.push({\n      label: \"Quit ironNode\",\n      click: function () {\n        app.quit();\n      },\n      accelerator: \"Cmd+Q\"\n    });\n  }\n\ttemplate.push(mnuFile);\n\n\tif (os.platform() === \"darwin\"){\n\t\tvar mnuEdit = {\n\t\t\tlabel : \"Edit\",\n\t\t\tsubmenu:[\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Cut\",\n\t\t\t\t\taccelerator: \"Cmd+X\",\n\t\t\t\t\tselector: \"cut:\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Copy\",\n\t\t\t\t\taccelerator: \"Cmd+C\",\n\t\t\t\t\tselector: \"copy:\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Paste\",\n\t\t\t\t\taccelerator: \"Cmd+V\",\n\t\t\t\t\tselector: \"paste:\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: \"Select All\",\n\t\t\t\t\taccelerator: \"Cmd+A\",\n\t\t\t\t\tselector: \"selectAll:\"\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\ttemplate.push(mnuEdit);\n\t}\n\n\tvar mnuView =   {\n\t\tlabel: \"View\",\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: \"Show developer tools\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tmainWindow.openDevTools();\n\t\t\t\t},\n\t\t\t\taccelerator: \"F12\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Show global config folder\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tvar shell = require(\"electron\").shell;\n\t\t\t\t\tvar f = path.join(app.getPath(\"appData\"), \"iron-node\");\n\t\t\t\t\tif (!fs.existsSync(f)){\n\t\t\t\t\t\tconsole.warn(\"No packages folder found. You can install some at \" +  path.join( app.getPath(\"appData\"), \"iron-node\", \"node_modules\" ) + \" from \", \"https://www.npmjs.com/search?q=iron-node\", \":O)\");\n\t\t\t\t\t}\n\t\t\t\t\tshell.openItem( f );\n\t\t\t\t} \n\t\t\t}\n\t\t]\n\t};\n\ttemplate.push(mnuView);\n\n\tvar mnuHelp =   {\n\t\tlabel: \"Help\",\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: \"Documentation\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tshell.openExternal(\"https://developer.chrome.com/devtools/docs/javascript-debugging\");\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Report a bug\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tshell.openExternal(\"https://github.com/s-a/iron-node/issues\");\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"separator\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Source Code\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tshell.openExternal(\"https://github.com/s-a/iron-node\");\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"separator\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Check for Updates\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tvar upd = new SoftwareUpdate();\n\t\t\t\t\tupd.check(mainWindow);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: \"separator\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: \"Donate\",\n\t\t\t\tclick: function() {\n\t\t\t\t\tshell.openExternal(\"http://s-a.github.io/donate/\");\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t};\n\ttemplate.push(mnuHelp);\n\n\tvar menu = Menu.buildFromTemplate(template);\n\tMenu.setApplicationMenu(menu);\n};\n\nmodule.exports = Mnu;\n","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/update.js":"const {dialog} = require(\"electron\");\nvar execute = function(cmd, done) {\n\tvar exec = require(\"child_process\").exec;\n\texec(cmd,\n\t\tfunction (error, stdout, stderr) {\n\t\t\tconsole.log(\"CMD:\", cmd);\n\t\t\tconsole.log(stdout);\n\t\t\tconsole.log(stderr);\n\t\t\tif (error === null) {\n\t\t\t\tdone(stdout);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"exec error: \" + error);\n\t\t\t\tthrow error;\n\t\t\t}\n\t});\n};\n\nvar Update = function () {\n\treturn this;\n};\n\nUpdate.prototype.check = function(window) {\n\tdialog.showMessageBox(window, {type:\"info\", title:\"ironNode Update check\", message:\"Stay tuned. This may take a few seconds.\", detail:\"\", buttons: [\"ok\"]});\n\texecute(\"npm outdated -g --depth=0 iron-node\", function(str){\n\t\tdialog.showMessageBox(window, {type:\"info\", title:\"ironNode Update check done\", message:str, detail:\"\", buttons: [\"ok\"]});\n\t});\n};\n\nmodule.exports = Update;","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/require-custom-wrap.js":"var settings;\nvar Module = require(\"module\");\n\n\nvar isArray = function(ar) {\n  return ar instanceof Array || Array.isArray(ar) || (ar && ar !== Object.prototype && isArray(ar.__proto__));\n};\n\nvar newModuleWrap = function(script) {\n\tvar nodeParms = [\"exports\", \"require\", \"module\", \"__filename\", \"__dirname\", \"process\", \"global\"];\n\tif (settings.nodeModule.arguments && isArray(settings.nodeModule.arguments)){\n\t\tfor (var i = 0; i < settings.nodeModule.arguments.length; i++) {\n\t\t\tvar parm = settings.nodeModule.arguments[i];\n\t\t\tnodeParms.push(parm);\n\t\t}\n\t}\n\n\tvar w = [];\n\tw.push(\"(function (\" + nodeParms.join(\", \") + \") { \\n\");\n\n\tif(settings.nodeModule && settings.nodeModule.scriptInjection){\n\t\tscript = settings.nodeModule.scriptInjection  + \"\\n\" + script;\n\t}\n\n\tw.push(\"\\n});\");\n\n\treturn w[0] + script + w[1];\n};\n\nvar ModedModule = function (ironNodeSettings) {\n\tsettings = ironNodeSettings;\n\tconsole.log(settings);\n\tif (ironNodeSettings && ironNodeSettings.nodeModule){\n\t\t(function(moduleWrapMethode) {\n\t\t\tModule.wrap = function(script) {\n\t\t\t\treturn moduleWrapMethode(script); // Call the new wrapper function\n\t\t\t};\n\t\t}(newModuleWrap)); // Pass original function to IIFE\n\t}\n};\n\nmodule.exports = ModedModule;","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/require.js":"//var fs = require(\"fs\");\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nvar NMP = require(\"nmp\");\nvar nmp = new NMP();\nvar Module = require('module');\n\n// keep a copy of original require function\nvar _require = Module.prototype.require;\n\n\nvar checkNodeModulesLevel = function(dir) {\n\tvar result = -1;\n\tvar p = dir;\n\n\twhile( path.basename(p) !== \"node_modules\" ){\n\t\t// can it go back?\n\t\tvar newPath = path.join(p, \"..\");\n\t\tif (newPath !== p){\n\t\t\tp = newPath;\n\t\t\tresult++;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn result;\n\n};\n\nModule.prototype.require = function require(name) {\n\tvar result = null;\n\n\t// test if native module should be loaded.\n\tif (path.extname(name).toLowerCase() === \".node\" || fs.existsSync(name + \".node\")){\n\t\tconsole.groupCollapsed(\"ironNode require(\\\"\" + name + \"\\\")\");\n\t\ttry{\n\t\t\tvar fn = path.basename(name);\n\t\t\tvar fn2 = (path.isAbsolute(name) ? name : this.filename);\n\t\t\tvar p = path.join(fn2, \"..\");\n\n\t\t\t/*jump back to nearest node_modules*/\n\t\t\tvar nodeModulesLevel = checkNodeModulesLevel(fn2);\n\t\t\tif (nodeModulesLevel === -1){\n\t\t\t\tthrow \"native+ fallback for `\" + name + \"` failed! You can try `iron-node --compile`\";\n\t\t\t}\n\t\t\tfor (var lvl = 0; lvl < nodeModulesLevel-1; lvl++) {\n\t\t\t\tp = path.join(p, \"..\");\n\t\t\t}\n\t\t\tp = path.join(p, \"bin\", nmp.versionString(), fn);\n\n\t\t\tconsole.warn(\"try native+ method `require(\" + p + \");`\");\n\t\t\tresult = _require.call(this, p);\n\t\t} catch(e) {\n\t\t\tconsole.error(\"error while `require(\" + path.basename(name) + \");`\", e);\n    \t\tresult = _require.call(this, name);\n\t\t} finally {\n\t\t\tif (result !== null){\n\t\t\t\tconsole.info(\"success\");\n\t\t\t}\n\t\t\tconsole.groupEnd();\n\t\t}\n\t} else {\n    \tresult = _require.call(this, name);\n\t}\n\treturn result;\n};\n","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/bin/run.js":"#!/usr/bin/env node\nvar electron = require(\"electron\");\nvar proc = require(\"child_process\");\nvar fs = require(\"fs\");\nvar os = require('os');\nvar path = require(\"path\");\n\nvar sep \t\t= path.sep;\nvar userHome \t= os.homedir() + sep + '.iron-node';\nfunction mkDirOnce (dirPath) {\n\tconsole.log('userhome ' + dirPath)\n\ttry {\n\t\tfs.statSync(dirPath);\n\t\tconsole.log('exist')\n\t} catch(e) {\n\t\ttry {\n\t\t\tfs.mkdirSync(dirPath);\n\t\t\tconsole.log('created')\n\t\t}catch(error){\n\t\t\tconsole.log('error:' + error);\n\t\t}\n\t}\n}\nmkDirOnce(userHome);\n\nvar args = [path.join(__dirname, \"..\", \"app\")];\nfor (var i = 2; i < process.argv.length; i++) {\n\tvar arg = process.argv[i];\n\targs.push(arg);\n}\n\n\nvar onStdIn = function(done) {\n\tif( process.stdin.isTTY === true ){\n\t\tdone();\n\t}\n\n\tvar body = \"\";\n\tprocess.stdin.on(\"data\", function(chunk) {\n\t\tif (chunk){\n\t\t\tbody += chunk.toString();\n\t\t}\n\t});\n\n\tprocess.stdin.on(\"end\", function() {\n\t\tdone(body);\n\t});\n};\n\nonStdIn(function(stdin){\n\tif (stdin){\n\t\tvar temporaryFilename = path.join(__dirname, \"iron-node.piped-result.~mp.js\");\n\t\tfs.writeFileSync(temporaryFilename, stdin);\n\t\targs[1] = temporaryFilename;\n\t}\n\n\tfs.writeFileSync(path.join(userHome, \"iron-node.env.json\"), JSON.stringify(process.env, null, 4));\n\n\t// spawn electron\n\tvar _proc = proc.spawn(electron, args);\n\n\t_proc.on(\"close\", function (code) {\n\t\tprocess.exit(code);\n\t});\n});","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/devtools-extension/background.js":"// Chrome automatically creates a background.html page for this to execute.\n// This can access the inspected page via executeScript\n// \n// Can use:\n// chrome.tabs.*\n// chrome.extension.*\n\n \n\nchrome.extension.onConnect.addListener(function (port) {\n\n    var extensionListener = function (message, sender, sendResponse) {\n\n        if(message.tabId && message.content) {\n\n                //Evaluate script in inspectedPage\n                if(message.action === 'code') {\n                    chrome.tabs.executeScript(message.tabId, {code: message.content});\n\n                //Attach script to inspectedPage\n                } else if(message.action === 'script') {\n                    chrome.tabs.executeScript(message.tabId, {file: message.content});\n\n                //Pass message to inspectedPage\n                } else {\n                    chrome.tabs.sendMessage(message.tabId, message, sendResponse);\n                }\n\n        // This accepts messages from the inspectedPage and \n        // sends them to the panel\n        } else {\n            port.postMessage(message);\n        }\n        sendResponse(message);\n    }\n\n    // Listens to messages sent from the panel\n    chrome.extension.onMessage.addListener(extensionListener);\n\n    port.onDisconnect.addListener(function(port) {\n        chrome.extension.onMessage.removeListener(extensionListener);\n    });\n\n    // port.onMessage.addListener(function (message) {\n    //     port.postMessage(message);\n    // });\n\n});\nchrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {\n    console.log(request, sender, sendResponse);\n    return true;\n});\n\nchrome.commands.onCommand.addListener(function(command) {\n    console.log(command);\n});\n    ","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/devtools-extension/devtools.js":"// Can use\n// chrome.devtools.*\n// chrome.extension.*\n\n// Create a tab in the devtools area\nchrome.devtools.panels.create(\"ironNode\", \"icon.png\", \"panel.html\", function(panel) {});\n\n\n\nfunction doc_keyUp(e) {\n    alert(\"a\")\n    // this would test for whichever key is 40 and the ctrl key at the same time\n    if (e.ctrlKey && e.keyCode == 65) {\n        // call your function to do the thing\n        pauseSound();\n    }\n}\n \ndocument.addEventListener('keyup', doc_keyUp, false);","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/devtools-extension/inserted-script.js":"// This is included and executed in the inspected page\nfunction inserted() {\n\tconsole.log('External script attached');\n}\ninserted();","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/devtools-extension/messageback-script.js":"// document.querySelector('button').addEventListener('click', function() {\n//  chrome.extension.sendMessage({action: 'message', content:\"Changed by page\"}, function(message){});\n// });\ndocument.querySelector('button').addEventListener('click', function() {\n    sendObjectToDevTools({content: \"Changed by page\"});\n});\nfunction sendObjectToDevTools(message) {\n    // The callback here can be used to execute something on receipt\n    chrome.extension.sendMessage(message, function(message){});\n}","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/devtools-extension/messaging.js":"// This creates and maintains the communication channel between\n// the inspectedPage and the dev tools panel.\n//\n// In this example, messages are JSON objects\n// {\n//   action: ['code'|'script'|'message'], // What action to perform on the inspected page\n//   content: [String|Path to script|Object], // data to be passed through\n//   tabId: [Automatically added]\n// }\n\n(function createChannel() {\n    //Create a port with background page for continous message communication\n    var port = chrome.extension.connect({\n        name: \"Sample Communication\" //Given a Name\n    });\n\n    // Listen to messages from the background page\n    port.onMessage.addListener(function (message) {\n      document.querySelector('#insertmessagebutton').innerHTML = message.content;\n      // port.postMessage(message);\n    });\n\n}());\n\n// This sends an object to the background page \n// where it can be relayed to the inspected page\nfunction sendObjectToInspectedPage(message) {\n    message.tabId = chrome.devtools.inspectedWindow.tabId;\n    chrome.extension.sendMessage(message);\n}","/home/travis/build/npmtest/node-npmtest-iron-node/node_modules/iron-node/app/devtools-extension/panel.js":"// This one acts in the context of the panel in the Dev Tools\n//\n// Can use\n// chrome.devtools.*\n// chrome.extension.*\n\n \n\ndocument.querySelector('#executescript').addEventListener('click', function() {\n    sendObjectToInspectedPage({action: \"code\", content: \"window.close();\"});\n}, false);\n\ndocument.querySelector('#insertscript').addEventListener('click', function() {\n    sendObjectToInspectedPage({action: \"script\", content: \"inserted-script.js\"});\n}, false);\n\ndocument.querySelector('#insertmessagebutton').addEventListener('click', function() {\n    sendObjectToInspectedPage({action: \"code\", content: \"document.body.innerHTML='<button>Send message to DevTools</button>'\"});\n    sendObjectToInspectedPage({action: \"script\", content: \"messageback-script.js\"});\n}, false);"}